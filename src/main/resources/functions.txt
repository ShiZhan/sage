Stand Along Graph Engine
Usage: sage [-hipmg] <options> [input file]

 -h   Print this message

 -i   [input file],     import edge list to binary shards for processing.
                        input as 2 columns csv, comments start with '#',
                        omit for console input.
      --shard [number], the number of edge list shards, should be power of 2.

 -p   [algorithm],      run designated algorithm on imported graph.
      [input file],     the name prefix of imported edge list shards,
                        usually the same as file name for import.
      --shard [number], the number of edge list shards, should be power of 2.

      Supported algorithms:
      Breadth-First Search         [BFS:root(Long)]   E.g.: "bfs:0"
      Single Source Shortest Path  [SSSP:root(Long)]  E.g.: "sssp:0"
      Connected Component          [CC]               E.g.: "cc"
      Clustering Coefficient       [CLUSTER]          E.g.: "cluster"
      Page Rank                    [PAGERANK]         E.g.: "pagerank"
      Counting Triangle            [TRIANGLE]         E.g.: "triangle"
      K-Core, Degree distribution  [STAT]             E.g.: "stat"

      Default:
      Print all edges

 -m   [vertex map],     remap vertex ID in edge list by given map.
                        map is stored as sequence[Long]:

                        Original ID  -->  New ID
                        -----------       ------
                        value[Long]       line number[Long]
                        "-1"              bypass this line (unused new ID)

      [input file],     input as 2 columns csv, comments start with '#',
                        omit for console input.
      --output [file],  output edge list to file, omit for console output.

 -g   [generator],      generate synthetic graph.

      Available generators:
      RMAT:scale(Int):degree(Int),              E.g.: rmat:8:8
      ER:scale(Int):ratio(Double),              E.g.: er:8:0.1
      SW:scale(Int):neighbour:rewiring(Double), E.g.: sw:8:3:0.1

      --self-loop,      allow self loop edges.
      --uniq,           (almost) remove duplicate edges (slow on big graphs).
      --bidirection,    generate reverse edges (bidirectional) simultaneously.
      --output [file],  output edge list to file, omit for console output.

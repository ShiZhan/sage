Stand Along Graph Engine
Usage: sage [-hipmg] <options> [input file]

 -h   Print this message

 -i   [edge list file]  import edge list file for processing.
                        omit for console text input.

      from (Long)       to (Long)        weight (Float, optional) text
      |-----------------|----------------|----------------------|
      0                 7               15                     19 byte
      0                63              127                    159 bit

      --binary          input as binary edge list.
      --self-loop       allow self loop edges.
      --bidirectional   generate reverse edges simultaneously.
      --weight          generate random weight if vacancy.

 -p   [algorithm]       run designated algorithm on imported graph.

      algorithms                   options                example
      ----------                   -------                -------
      Breadth-First Search         bfs[:u]:root(Long)     bfs:u:0
      Single Source Shortest Path  sssp[u]:root(Long)     sssp:u:0
      Minimal Spanning Tree        mst                    mst
      Connected Component          cc                     cc
      Degree distribution          degree[:u]             degree
      K-Core distribution          kcore                  kcore
      Page Rank                    pagerank:loops(Int)    pagerank:10
      Clustering Coefficient       cluster                cluster
      Counting Triangle            triangle               triangle

      * u: use edge list as undirected.
      * SSSP, MST require weighted graph.

      [edge list file]  edge list file.

 -m   [vertex map]      map vertex ID in edge list by given vertex map file.
                        vertex map file is stored as sequence[Long]:

                        Original ID  -->  New ID
                        -----------       ------
                        value[Long]       line number[Long]
                        "-1"              bypass this line (unused new ID)

                        if given vertex map file does not exist, program will
                        generate consecutive IDs for edge list, and store the
                        map into specified vertex map file.

      [edge list file]  input edge list file, omit for console input.
      --binary          input and output as binary edge list.

 -g   [generator]       generate synthetic graph.

      generators        options                                   example
      ----------        -------                                   -------
      Recursive MATrix  rmat:scale:degree(Int)                    rmat:8:8
      Erdos Renyi       er:scale(Int):ratio(Double)               er:8:0.1
      ER Simplified     ers:scale(Int):degree(Int)                er:8:8
      Small World       sw:scale:neighbour(Int):rewiring(Double)  sw:8:3:0.1
      Barabasi Albert   ba:scale:m0(Int)                          ba:8:3
      BA Simplified     bas:scale:m0(Int)                         bas:8:3
      Grid2             grid:row-scale:col-scale(Int)             grid:3:3
      Grid3             grid:x-scale:y-scale:z-scale(Int)         grid:3:3:3

      [edge list file]  output edge list file, omit for console output.
      --binary          output as binary edge list.
      --weight          output weighted edge list.

Shi Zhan
http://shizhan.github.io/
